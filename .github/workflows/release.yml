name: Releases
on: 
  push:
    branches:
      - main

jobs:
  changelog:
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.CHANGELOG_RELEASE }}

      - name: Determine Next Version
        id: next_version
        run: |
          # Fetch tags from the repository
          git fetch --tags
          
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0)
          
          # If no tags are found, set the initial version
          if [ -z "$latest_tag" ]; then
            next_version="v0.0.1"
          else
            # Extract version numbers and increment the patch version
            latest_version=${latest_tag#v}
            IFS='.' read -r -a version_parts <<< "$latest_version"
            major=${version_parts[0]}
            minor=${version_parts[1]}
            patch=${version_parts[2]}
            next_patch=$((patch + 1))
            next_version="v${major}.${minor}.${next_patch}"
          fi

          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env: 
          GITHUB_TOKEN: ${{ secrets.CHANGELOG_RELEASE }}
        with:
          tag_name: ${{ env.next_version }}
          release_name: ${{ env.next_version }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

      - name: Push New Tag
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        run: |
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}
